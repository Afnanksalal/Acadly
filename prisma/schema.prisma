generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id          String   @id @db.Uuid
  email       String   @unique
  name        String?
  username    String?  @unique
  avatarUrl   String?
  phone       String?
  department  String?
  year        String?
  class       String?
  bio         String?
  role        Role     @default(USER)
  verified    Boolean  @default(false)
  ratingAvg   Float    @default(0)
  ratingCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  listings        Listing[]
  purchases       Transaction[] @relation("Purchases")
  sales           Transaction[] @relation("Sales")
  reviewsGiven    Review[]      @relation("ReviewsGiven")
  reviewsReceived Review[]      @relation("ReviewsReceived")
  disputes        Dispute[]
  chatsBuyer      Chat[]        @relation("ChatBuyer")
  chatsSeller     Chat[]        @relation("ChatSeller")
  Message         Message[]
  Offer           Offer[]
  AdminAction     AdminAction[]
  events          Event[]
  trophies        Trophy[]
  badges          Badge[]
  projects        Project[]
  papers          Paper[]
  clubMemberships ClubMembership[]
  notifications   Notification[]
  analytics       Analytics[]
  feedback        Feedback[]
  feedbackAssigned Feedback[] @relation("FeedbackAssignee")
  feedbackResponses FeedbackResponse[]
  announcements   Announcement[]
  announcementViews AnnouncementView[]
  reportsCreated  Report[] @relation("ReportsCreated")
  reportsReceived Report[] @relation("ReportsReceived")
  reportsAssigned Report[] @relation("ReportsAssigned")
  userSessions    UserSession[]
  auditLogs       AuditLog[]

  @@map("profiles")
}

enum Role {
  USER
  ADMIN
}

enum ListingType {
  PRODUCT
  SERVICE
}

enum TransactionStatus {
  INITIATED
  PAID
  CANCELLED
  REFUNDED
}

enum PickupStatus {
  GENERATED
  CONFIRMED
}

enum OfferStatus {
  PROPOSED
  COUNTERED
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

enum ReadStatus {
  SENT
  DELIVERED
  READ
}

enum DisputeStatus {
  OPEN
  IN_REVIEW
  RESOLVED
  REJECTED
}

enum DisputeReason {
  NOT_AS_DESCRIBED
  NOT_RECEIVED
  DAMAGED
  FAKE
  SELLER_UNRESPONSIVE
  BUYER_UNRESPONSIVE
  PAYMENT_ISSUE
  OTHER
}

enum DisputePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Category {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  parentId  String?    @db.Uuid
  parent    Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToParent")
  createdAt DateTime   @default(now())
  listings  Listing[]

  @@unique([name, parentId])
  @@map("categories")
}

model Listing {
  id               String      @id @default(uuid()) @db.Uuid
  userId           String      @db.Uuid
  user             Profile     @relation(fields: [userId], references: [id])
  title            String
  description      String
  price            Decimal     @db.Decimal(12, 2)
  categoryId       String      @db.Uuid
  category         Category    @relation(fields: [categoryId], references: [id])
  images           Json
  type             ListingType
  isActive         Boolean     @default(true)
  requiresApproval Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  chats        Chat[]
  transactions Transaction[]

  @@index([categoryId, type, createdAt])
  @@map("listings")
}

model Chat {
  id        String   @id @default(uuid()) @db.Uuid
  listingId String   @db.Uuid
  listing   Listing  @relation(fields: [listingId], references: [id])
  buyerId   String   @db.Uuid
  buyer     Profile  @relation("ChatBuyer", fields: [buyerId], references: [id])
  sellerId  String   @db.Uuid
  seller    Profile  @relation("ChatSeller", fields: [sellerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  offers   Offer[]

  @@unique([listingId, buyerId, sellerId])
  @@index([listingId, buyerId, sellerId])
  @@map("chats")
}

model Message {
  id         String     @id @default(uuid()) @db.Uuid
  chatId     String     @db.Uuid
  chat       Chat       @relation(fields: [chatId], references: [id])
  senderId   String     @db.Uuid
  sender     Profile    @relation(fields: [senderId], references: [id])
  text       String
  readStatus ReadStatus @default(SENT)
  createdAt  DateTime   @default(now())

  @@index([chatId, createdAt])
  @@map("messages")
}

model Offer {
  id         String      @id @default(uuid()) @db.Uuid
  chatId     String      @db.Uuid
  chat       Chat        @relation(fields: [chatId], references: [id])
  proposerId String      @db.Uuid
  proposer   Profile     @relation(fields: [proposerId], references: [id])
  price      Decimal     @db.Decimal(12, 2)
  status     OfferStatus @default(PROPOSED)
  createdAt  DateTime    @default(now())
  expiresAt  DateTime?

  @@index([chatId, createdAt])
  @@map("offers")
}

model Transaction {
  id                String            @id @default(uuid()) @db.Uuid
  buyerId           String            @db.Uuid
  buyer             Profile           @relation("Purchases", fields: [buyerId], references: [id])
  sellerId          String            @db.Uuid
  seller            Profile           @relation("Sales", fields: [sellerId], references: [id])
  listingId         String            @db.Uuid
  listing           Listing           @relation(fields: [listingId], references: [id])
  amount            Decimal           @db.Decimal(12, 2)
  status            TransactionStatus @default(INITIATED)
  razorpayOrderId   String?
  razorpayPaymentId String?
  createdAt         DateTime          @default(now())

  pickup  Pickup?
  reviews Review[]
  Dispute Dispute[]

  @@index([buyerId, sellerId, listingId, status])
  @@map("transactions")
}

model Pickup {
  id            String       @id @default(uuid()) @db.Uuid
  transactionId String       @unique @db.Uuid
  transaction   Transaction  @relation(fields: [transactionId], references: [id])
  pickupCode    String
  status        PickupStatus @default(GENERATED)
  createdAt     DateTime     @default(now())
  confirmedAt   DateTime?

  @@map("pickups")
}

model Review {
  id            String      @id @default(uuid()) @db.Uuid
  transactionId String      @db.Uuid
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  reviewerId    String      @db.Uuid
  reviewer      Profile     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  revieweeId    String      @db.Uuid
  reviewee      Profile     @relation("ReviewsReceived", fields: [revieweeId], references: [id])
  rating        Int
  comment       String?
  helpful       Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([transactionId, reviewerId])
  @@index([reviewerId, revieweeId])
  @@map("reviews")
}

model Dispute {
  id            String        @id @default(uuid()) @db.Uuid
  transactionId String        @db.Uuid
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  reporterId    String        @db.Uuid
  reporter      Profile       @relation(fields: [reporterId], references: [id])
  subject       String
  description   String
  reason        DisputeReason @default(OTHER)
  evidence      Json?
  status        DisputeStatus @default(OPEN)
  priority      DisputePriority @default(MEDIUM)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  resolvedAt    DateTime?
  resolvedBy    String?       @db.Uuid
  resolution    String?
  refundAmount  Decimal?      @db.Decimal(12, 2)

  actions AdminAction[]

  @@index([status, createdAt])
  @@index([priority, status])
  @@map("disputes")
}

model AdminAction {
  id        String   @id @default(uuid()) @db.Uuid
  disputeId String   @db.Uuid
  dispute   Dispute  @relation(fields: [disputeId], references: [id])
  adminId   String   @db.Uuid
  admin     Profile  @relation(fields: [adminId], references: [id])
  action    String
  createdAt DateTime @default(now())

  @@map("admin_actions")
}

model Event {
  id          String      @id @default(uuid()) @db.Uuid
  creatorId   String      @db.Uuid
  creator     Profile     @relation(fields: [creatorId], references: [id])
  title       String
  description String
  imageUrl    String?
  venue       String
  hostType    HostType
  hostName    String      // Club name, Department name, etc.
  startTime   DateTime
  endTime     DateTime?
  status      EventStatus @default(UPCOMING)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([status, startTime])
  @@index([creatorId])
  @@map("events")
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum HostType {
  CLUB
  DEPARTMENT
  STUDENT_GROUP
  COLLEGE
  OTHER
}

model Trophy {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  user        Profile  @relation(fields: [userId], references: [id])
  title       String
  description String?
  category    TrophyCategory @default(ACADEMIC)
  awardedBy   String?
  awardedAt   DateTime
  imageUrl    String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId, category])
  @@map("trophies")
}

model Badge {
  id          String     @id @default(uuid()) @db.Uuid
  userId      String     @db.Uuid
  user        Profile    @relation(fields: [userId], references: [id])
  name        String
  description String?
  type        BadgeType  @default(ACHIEVEMENT)
  iconUrl     String?
  color       String?    @default("#3B82F6")
  earnedAt    DateTime   @default(now())
  isVisible   Boolean    @default(true)

  @@index([userId, type])
  @@map("badges")
}

model Project {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String        @db.Uuid
  user        Profile       @relation(fields: [userId], references: [id])
  title       String
  description String
  category    ProjectCategory @default(ACADEMIC)
  technologies Json?        // Array of tech stack
  githubUrl   String?
  liveUrl     String?
  imageUrls   Json?         // Array of project images
  startDate   DateTime?
  endDate     DateTime?
  status      ProjectStatus @default(COMPLETED)
  isPublic    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId, category, status])
  @@map("projects")
}

model Paper {
  id          String     @id @default(uuid()) @db.Uuid
  userId      String     @db.Uuid
  user        Profile    @relation(fields: [userId], references: [id])
  title       String
  abstract    String?
  authors     Json       // Array of author names
  journal     String?
  conference  String?
  publishedAt DateTime?
  doi         String?
  pdfUrl      String?
  category    PaperCategory @default(RESEARCH)
  keywords    Json?      // Array of keywords
  citations   Int        @default(0)
  isVerified  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId, category])
  @@map("papers")
}

model Club {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @unique
  description String?
  category    ClubCategory @default(ACADEMIC)
  logoUrl     String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  members     ClubMembership[]

  @@index([category, isActive])
  @@map("clubs")
}

model ClubMembership {
  id        String           @id @default(uuid()) @db.Uuid
  userId    String           @db.Uuid
  user      Profile          @relation(fields: [userId], references: [id])
  clubId    String           @db.Uuid
  club      Club             @relation(fields: [clubId], references: [id])
  role      ClubRole         @default(MEMBER)
  position  String?          // Custom position title
  joinedAt  DateTime         @default(now())
  leftAt    DateTime?
  isActive  Boolean          @default(true)

  @@unique([userId, clubId])
  @@index([clubId, role])
  @@map("club_memberships")
}

enum TrophyCategory {
  ACADEMIC
  SPORTS
  CULTURAL
  TECHNICAL
  LEADERSHIP
  COMMUNITY
  OTHER
}

enum BadgeType {
  ACHIEVEMENT
  SKILL
  PARTICIPATION
  MILESTONE
  SPECIAL
}

enum ProjectCategory {
  ACADEMIC
  PERSONAL
  HACKATHON
  INTERNSHIP
  FREELANCE
  OPEN_SOURCE
  RESEARCH
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  PAUSED
  CANCELLED
}

enum PaperCategory {
  RESEARCH
  REVIEW
  CONFERENCE
  JOURNAL
  THESIS
  DISSERTATION
}

enum ClubCategory {
  ACADEMIC
  TECHNICAL
  CULTURAL
  SPORTS
  SOCIAL
  PROFESSIONAL
  HOBBY
}

enum ClubRole {
  MEMBER
  COORDINATOR
  SECRETARY
  TREASURER
  VICE_PRESIDENT
  PRESIDENT
  ADVISOR
}

model Notification {
  id          String            @id @default(uuid()) @db.Uuid
  userId      String            @db.Uuid
  user        Profile           @relation(fields: [userId], references: [id])
  type        NotificationType  @default(GENERAL)
  title       String
  message     String
  data        Json?             // Additional data for the notification
  isRead      Boolean           @default(false)
  priority    NotificationPriority @default(NORMAL)
  expiresAt   DateTime?
  createdAt   DateTime          @default(now())

  @@index([userId, isRead, createdAt])
  @@index([type, priority])
  @@map("notifications")
}

model Analytics {
  id          String      @id @default(uuid()) @db.Uuid
  eventType   String      // page_view, user_action, transaction, etc.
  eventName   String      // specific event name
  userId      String?     @db.Uuid
  user        Profile?    @relation(fields: [userId], references: [id])
  sessionId   String?
  data        Json?       // Event-specific data
  metadata    Json?       // Browser, device, location info
  createdAt   DateTime    @default(now())

  @@index([eventType, eventName, createdAt])
  @@index([userId, createdAt])
  @@map("analytics")
}

model Feedback {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String?       @db.Uuid
  user        Profile?      @relation(fields: [userId], references: [id])
  type        FeedbackType  @default(GENERAL)
  category    String?       // bug, feature_request, improvement, etc.
  title       String
  description String
  rating      Int?          // 1-5 rating
  status      FeedbackStatus @default(OPEN)
  priority    FeedbackPriority @default(MEDIUM)
  assignedTo  String?       @db.Uuid
  assignee    Profile?      @relation("FeedbackAssignee", fields: [assignedTo], references: [id])
  tags        Json?         // Array of tags
  attachments Json?         // Array of file URLs
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  resolvedAt  DateTime?

  responses   FeedbackResponse[]

  @@index([type, status, priority])
  @@index([userId, createdAt])
  @@map("feedback")
}

model FeedbackResponse {
  id          String    @id @default(uuid()) @db.Uuid
  feedbackId  String    @db.Uuid
  feedback    Feedback  @relation(fields: [feedbackId], references: [id])
  userId      String    @db.Uuid
  user        Profile   @relation(fields: [userId], references: [id])
  message     String
  isInternal  Boolean   @default(false) // Internal admin notes vs public responses
  createdAt   DateTime  @default(now())

  @@index([feedbackId, createdAt])
  @@map("feedback_responses")
}

model Announcement {
  id          String              @id @default(uuid()) @db.Uuid
  title       String
  content     String
  type        AnnouncementType    @default(INFO)
  priority    AnnouncementPriority @default(NORMAL)
  targetAudience Json?            // Array of user roles/criteria
  isActive    Boolean             @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdBy   String              @db.Uuid
  creator     Profile             @relation(fields: [createdBy], references: [id])
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  views       AnnouncementView[]

  @@index([type, priority, isActive])
  @@index([startDate, endDate])
  @@map("announcements")
}

model AnnouncementView {
  id             String       @id @default(uuid()) @db.Uuid
  announcementId String       @db.Uuid
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  userId         String       @db.Uuid
  user           Profile      @relation(fields: [userId], references: [id])
  viewedAt       DateTime     @default(now())

  @@unique([announcementId, userId])
  @@map("announcement_views")
}

model Report {
  id          String      @id @default(uuid()) @db.Uuid
  reporterId  String      @db.Uuid
  reporter    Profile     @relation("ReportsCreated", fields: [reporterId], references: [id])
  targetType  String      // USER, LISTING, MESSAGE, REVIEW, etc.
  targetId    String      @db.Uuid
  targetUser  String?     @db.Uuid
  reportedUser Profile?   @relation("ReportsReceived", fields: [targetUser], references: [id])
  reason      ReportReason @default(OTHER)
  description String?
  evidence    Json?       // Screenshots, links, etc.
  status      ReportStatus @default(PENDING)
  priority    ReportPriority @default(MEDIUM)
  assignedTo  String?     @db.Uuid
  assignee    Profile?    @relation("ReportsAssigned", fields: [assignedTo], references: [id])
  resolution  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  resolvedAt  DateTime?

  @@index([status, priority, createdAt])
  @@index([targetType, targetId])
  @@index([reporterId, createdAt])
  @@map("reports")
}

model UserSession {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid
  user        Profile   @relation(fields: [userId], references: [id])
  sessionId   String    @unique
  ipAddress   String?
  userAgent   String?
  location    Json?     // Country, city, etc.
  device      Json?     // Device info
  isActive    Boolean   @default(true)
  lastActivity DateTime @default(now())
  createdAt   DateTime  @default(now())
  expiresAt   DateTime

  @@index([userId, isActive])
  @@index([sessionId])
  @@map("user_sessions")
}

model AuditLog {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String?   @db.Uuid
  user        Profile?  @relation(fields: [userId], references: [id])
  action      String    // CREATE, UPDATE, DELETE, LOGIN, etc.
  resource    String    // USER, LISTING, TRANSACTION, etc.
  resourceId  String?   @db.Uuid
  oldValues   Json?     // Previous state
  newValues   Json?     // New state
  ipAddress   String?
  userAgent   String?
  metadata    Json?     // Additional context
  createdAt   DateTime  @default(now())

  @@index([userId, action, createdAt])
  @@index([resource, resourceId])
  @@index([action, createdAt])
  @@map("audit_logs")
}

model SystemMetric {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    // cpu_usage, memory_usage, active_users, etc.
  value       Float
  unit        String?   // percentage, bytes, count, etc.
  tags        Json?     // Additional metadata
  timestamp   DateTime  @default(now())

  @@index([name, timestamp])
  @@map("system_metrics")
}

enum NotificationType {
  GENERAL
  TRANSACTION
  DISPUTE
  REVIEW
  CHAT
  ADMIN
  SYSTEM
  MARKETING
  SECURITY
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum FeedbackType {
  GENERAL
  BUG_REPORT
  FEATURE_REQUEST
  IMPROVEMENT
  COMPLAINT
  COMPLIMENT
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  DUPLICATE
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AnnouncementType {
  INFO
  WARNING
  SUCCESS
  ERROR
  MAINTENANCE
  FEATURE
  PROMOTION
}

enum AnnouncementPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ReportReason {
  SPAM
  HARASSMENT
  INAPPROPRIATE_CONTENT
  FRAUD
  FAKE_LISTING
  SCAM
  VIOLENCE
  HATE_SPEECH
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
  ESCALATED
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
