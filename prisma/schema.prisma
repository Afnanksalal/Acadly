generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id          String   @id @db.Uuid
  email       String   @unique
  name        String?
  username    String?  @unique
  avatarUrl   String?
  phone       String?
  department  String?
  year        String?
  class       String?
  bio         String?
  role        Role     @default(USER)
  verified    Boolean  @default(false)
  ratingAvg   Float    @default(0)
  ratingCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  listings        Listing[]
  purchases       Transaction[] @relation("Purchases")
  sales           Transaction[] @relation("Sales")
  reviewsGiven    Review[]      @relation("ReviewsGiven")
  reviewsReceived Review[]      @relation("ReviewsReceived")
  disputes        Dispute[]
  chatsBuyer      Chat[]        @relation("ChatBuyer")
  chatsSeller     Chat[]        @relation("ChatSeller")
  Message         Message[]
  Offer           Offer[]
  AdminAction     AdminAction[]
  events          Event[]

  @@map("profiles")
}

enum Role {
  USER
  ADMIN
}

enum ListingType {
  PRODUCT
  SERVICE
}

enum TransactionStatus {
  INITIATED
  PAID
  CANCELLED
  REFUNDED
}

enum PickupStatus {
  GENERATED
  CONFIRMED
}

enum OfferStatus {
  PROPOSED
  COUNTERED
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

enum ReadStatus {
  SENT
  DELIVERED
  READ
}

enum DisputeStatus {
  OPEN
  IN_REVIEW
  RESOLVED
  REJECTED
}

enum DisputeReason {
  NOT_AS_DESCRIBED
  NOT_RECEIVED
  DAMAGED
  FAKE
  SELLER_UNRESPONSIVE
  BUYER_UNRESPONSIVE
  PAYMENT_ISSUE
  OTHER
}

enum DisputePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Category {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  parentId  String?    @db.Uuid
  parent    Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToParent")
  createdAt DateTime   @default(now())
  listings  Listing[]

  @@unique([name, parentId])
  @@map("categories")
}

model Listing {
  id               String      @id @default(uuid()) @db.Uuid
  userId           String      @db.Uuid
  user             Profile     @relation(fields: [userId], references: [id])
  title            String
  description      String
  price            Decimal     @db.Decimal(12, 2)
  categoryId       String      @db.Uuid
  category         Category    @relation(fields: [categoryId], references: [id])
  images           Json
  type             ListingType
  isActive         Boolean     @default(true)
  requiresApproval Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  chats        Chat[]
  transactions Transaction[]

  @@index([categoryId, type, createdAt])
  @@map("listings")
}

model Chat {
  id        String   @id @default(uuid()) @db.Uuid
  listingId String   @db.Uuid
  listing   Listing  @relation(fields: [listingId], references: [id])
  buyerId   String   @db.Uuid
  buyer     Profile  @relation("ChatBuyer", fields: [buyerId], references: [id])
  sellerId  String   @db.Uuid
  seller    Profile  @relation("ChatSeller", fields: [sellerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  offers   Offer[]

  @@unique([listingId, buyerId, sellerId])
  @@index([listingId, buyerId, sellerId])
  @@map("chats")
}

model Message {
  id         String     @id @default(uuid()) @db.Uuid
  chatId     String     @db.Uuid
  chat       Chat       @relation(fields: [chatId], references: [id])
  senderId   String     @db.Uuid
  sender     Profile    @relation(fields: [senderId], references: [id])
  text       String
  readStatus ReadStatus @default(SENT)
  createdAt  DateTime   @default(now())

  @@index([chatId, createdAt])
  @@map("messages")
}

model Offer {
  id         String      @id @default(uuid()) @db.Uuid
  chatId     String      @db.Uuid
  chat       Chat        @relation(fields: [chatId], references: [id])
  proposerId String      @db.Uuid
  proposer   Profile     @relation(fields: [proposerId], references: [id])
  price      Decimal     @db.Decimal(12, 2)
  status     OfferStatus @default(PROPOSED)
  createdAt  DateTime    @default(now())
  expiresAt  DateTime?

  @@index([chatId, createdAt])
  @@map("offers")
}

model Transaction {
  id                String            @id @default(uuid()) @db.Uuid
  buyerId           String            @db.Uuid
  buyer             Profile           @relation("Purchases", fields: [buyerId], references: [id])
  sellerId          String            @db.Uuid
  seller            Profile           @relation("Sales", fields: [sellerId], references: [id])
  listingId         String            @db.Uuid
  listing           Listing           @relation(fields: [listingId], references: [id])
  amount            Decimal           @db.Decimal(12, 2)
  status            TransactionStatus @default(INITIATED)
  razorpayOrderId   String?
  razorpayPaymentId String?
  createdAt         DateTime          @default(now())

  pickup  Pickup?
  reviews Review[]
  Dispute Dispute[]

  @@index([buyerId, sellerId, listingId, status])
  @@map("transactions")
}

model Pickup {
  id            String       @id @default(uuid()) @db.Uuid
  transactionId String       @unique @db.Uuid
  transaction   Transaction  @relation(fields: [transactionId], references: [id])
  pickupCode    String
  status        PickupStatus @default(GENERATED)
  createdAt     DateTime     @default(now())
  confirmedAt   DateTime?

  @@map("pickups")
}

model Review {
  id            String      @id @default(uuid()) @db.Uuid
  transactionId String      @db.Uuid
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  reviewerId    String      @db.Uuid
  reviewer      Profile     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  revieweeId    String      @db.Uuid
  reviewee      Profile     @relation("ReviewsReceived", fields: [revieweeId], references: [id])
  rating        Int
  comment       String?
  helpful       Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([transactionId, reviewerId])
  @@index([reviewerId, revieweeId])
  @@map("reviews")
}

model Dispute {
  id            String        @id @default(uuid()) @db.Uuid
  transactionId String        @db.Uuid
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  reporterId    String        @db.Uuid
  reporter      Profile       @relation(fields: [reporterId], references: [id])
  subject       String
  description   String
  reason        DisputeReason @default(OTHER)
  evidence      Json?
  status        DisputeStatus @default(OPEN)
  priority      DisputePriority @default(MEDIUM)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  resolvedAt    DateTime?
  resolvedBy    String?       @db.Uuid
  resolution    String?
  refundAmount  Decimal?      @db.Decimal(12, 2)

  actions AdminAction[]

  @@index([status, createdAt])
  @@index([priority, status])
  @@map("disputes")
}

model AdminAction {
  id        String   @id @default(uuid()) @db.Uuid
  disputeId String   @db.Uuid
  dispute   Dispute  @relation(fields: [disputeId], references: [id])
  adminId   String   @db.Uuid
  admin     Profile  @relation(fields: [adminId], references: [id])
  action    String
  createdAt DateTime @default(now())

  @@map("admin_actions")
}

model Event {
  id          String      @id @default(uuid()) @db.Uuid
  creatorId   String      @db.Uuid
  creator     Profile     @relation(fields: [creatorId], references: [id])
  title       String
  description String
  imageUrl    String?
  venue       String
  hostType    HostType
  hostName    String      // Club name, Department name, etc.
  startTime   DateTime
  endTime     DateTime?
  status      EventStatus @default(UPCOMING)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([status, startTime])
  @@index([creatorId])
  @@map("events")
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum HostType {
  CLUB
  DEPARTMENT
  STUDENT_GROUP
  COLLEGE
  OTHER
}
