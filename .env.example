# Database Configuration
# Connection Pooler URL (for app runtime - use Transaction mode from Supabase)
DATABASE_URL="postgresql://postgres.xxxxx:[PASSWORD]@aws-0-region.pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1"

# Direct Connection URL (for migrations - use Session mode from Supabase)
DIRECT_URL="postgresql://postgres:[PASSWORD]@db.xxxxx.supabase.co:5432/postgres"

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL="https://xxx.supabase.co"
NEXT_PUBLIC_SUPABASE_ANON_KEY="eyJxxx..."
SUPABASE_SERVICE_ROLE_KEY="eyJxxx..."

# Razorpay Payment Gateway
# Production: Use rzp_live_ keys
# Development: Use rzp_test_ keys
NEXT_PUBLIC_RAZORPAY_KEY_ID="rzp_live_xxx"
RAZORPAY_KEY_ID="rzp_live_xxx"
RAZORPAY_KEY_SECRET="xxx"
RAZORPAY_WEBHOOK_SECRET="xxx"

# Rate Limiting (Upstash Redis) - REQUIRED for production
UPSTASH_REDIS_REST_URL="https://xxx.upstash.io"
UPSTASH_REDIS_REST_TOKEN="xxx"

# Security & Cron Jobs - REQUIRED for production
CRON_SECRET="your-secure-cron-secret-here-min-32-chars"

# Admin Configuration (comma-separated emails) - REQUIRED
ADMIN_EMAILS="admin@acadly.in,support@acadly.in"

# Application Configuration - REQUIRED
NEXT_PUBLIC_APP_URL="https://acadly.in"
NEXT_PUBLIC_APP_NAME="Acadly"

# Logging Configuration
LOG_LEVEL="info"

# Environment - REQUIRED
NODE_ENV="production"

# Production Security (recommended)
# JWT_SECRET="your-jwt-secret-for-additional-auth-min-32-chars"
# ENCRYPTION_KEY="your-encryption-key-for-sensitive-data-min-32-chars"

# Monitoring & Analytics (optional)
# SENTRY_DSN="https://xxx@xxx.ingest.sentry.io/xxx"
# GOOGLE_ANALYTICS_ID="G-XXXXXXXXXX"

# Email Configuration (optional)
# SMTP_HOST="smtp.gmail.com"
# SMTP_PORT="587"
# SMTP_USER="your-email@gmail.com"
# SMTP_PASS="your-app-password"

# File Storage (optional - for user uploads)
# AWS_ACCESS_KEY_ID="xxx"
# AWS_SECRET_ACCESS_KEY="xxx"
# AWS_REGION="ap-south-1"
# AWS_S3_BUCKET="acadly-uploads"

# Production Notes:
# 1. Use strong, unique secrets (minimum 32 characters)
# 2. Enable Redis for production rate limiting
# 3. Set up proper database connection pooling
# 4. Configure monitoring and alerting
# 5. Set up automated backups
# 6. Use production Razorpay keys
# 7. Configure proper CORS origins
# 8. Set up SSL/TLS certificates
# 9. Enable security headers
# 10. Configure proper logging levels
